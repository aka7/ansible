#TODO: Automate configuring JobServers 
---
 # Latest jobserver details retrieved to be added to the virtual server.
 - name: List existing jobservers
   uri:
     url: https://localhost:8443/org.talend.administrator/metaServlet?{{ ( '{' +
       '"authUser":"' + api_admin_user + '","authPass":"' + api_admin_pass + '",' +
       '"actionName":"listServer"' +
       '}' ) | b64encode }}
     return_content: true
     validate_certs: false
     status_code: 200
     timeout: 300
   register: existing_jobservers
   failed_when: existing_jobservers.json.returnCode is not defined or existing_jobservers.json.returnCode != 0

# Check jobserver is active before adding to virtualserver.
 - name: Check the jobserver status before adding them to virtual server
   assert:
     that: "'{{ existing_jobservers.content | from_json | json_query(jmesquery) }}' == '[True]'"
     fail_msg: "talend jobserver {{ item }} are not active "
     success_msg: "talend job servers are active {{ item }} "
   with_items: "{{ talend_jobservers }}"
   vars:
     jmesquery: "result[?label == '{{ item | replace('.','_') }}' ].active"

# Latest virtualserver details retrieved for the id.
 - name: List existing virtualserver
   uri:
     url: https://localhost:8443/org.talend.administrator/metaServlet?{{ ( '{' +
       '"authUser":"' + api_admin_user + '","authPass":"' + api_admin_pass + '",' +
       '"actionName":"listVirtualServers"' +
       '}' ) | b64encode }}
     return_content: true
     validate_certs: false
     status_code: 200
     timeout: 300
   register: existing_virtualservers
   failed_when: existing_virtualservers.json.returnCode is not defined or existing_virtualservers.json.returnCode != 0

# Set fact - jobserver('s)ID & virtual_server_id
 - name: set fact jobserverID
   set_fact:
     jobserverID: "{{ jobserverID|default([]) + [existing_jobservers.content | from_json | json_query(jmesquery)] }}" # noqa: var-naming
   with_items: "{{ talend_jobservers }}"
   vars:
     jmesquery: "result[?label == '{{ item | replace('.','_') }}'].id"

 - name: set fact virtual_server_id
   set_fact:
     virtual_server_id: "{{ existing_virtualservers.content | from_json | json_query(jmesquery) }}"
   vars:
     jmesquery: "result[?label == '{{ talend_virtualserver_js }}'].id"

# Adding js to vs
 - name: Add jobservers to virtualserver
   uri:
     url: https://localhost:8443/org.talend.administrator/metaServlet?{{ ( '{' +
       '"authUser":"' + api_admin_user + '","authPass":"' + api_admin_pass + '",' +
       '"actionName":"addServersToVirtualServer","virtualServerId":"' + virtual_server_id[0]|string + '",' +
       '"servers":[{"serverId":"' + item|string + '"}]' +
       '}' ) | b64encode }}
     validate_certs: false
     return_content: true
     status_code: 200
     timeout: 300
   register: this
   with_items: "{{ jobserverID }}"
   when: existing_virtualservers.content.find('"serverId":' + item|string + '') == -1
   failed_when: this.json.returnCode is not defined or this.json.returnCode != 0
